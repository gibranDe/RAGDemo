# MongoDB RAG Demo

Advanced Document Retrieval & AI Generation System using MongoDB Vector Search, VoyageAI, and GPT-4.

## 🚀 Features

- **🔍 MongoDB Vector Search**: Advanced vector similarity search with configurable parameters
- **🧠 VoyageAI Embeddings**: High-quality text embeddings and intelligent reranking
- **⚖️ Multi-Model Support**: Compare different embedding models (Voyage vs OpenAI)
- **📊 Real-time Metrics**: Performance analytics, timing breakdown, and cost tracking
- **🎨 Professional UI**: Clean, responsive interface with MongoDB design system
- **📄 Document Ingestion**: PDF and web scraping capabilities with chunking strategies
- **🔧 Advanced Controls**: Configurable MongoDB vector search parameters

## 🛠️ Tech Stack

### Backend
- **Python 3.8+** - Core application language
- **Flask** - Web framework for API and UI
- **MongoDB Atlas** - Vector database with search capabilities
- **VoyageAI** - Embedding generation and reranking
- **OpenAI GPT-4** - Answer generation

### Frontend
- **HTML5/CSS3** - Modern web standards
- **Bootstrap 5** - Responsive UI framework
- **JavaScript ES6+** - Interactive functionality
- **Font Awesome** - Icon library

### Document Processing
- **PyPDF2** - PDF text extraction
- **BeautifulSoup4** - Web scraping and HTML parsing
- **LangChain** - Document chunking and processing

## 📋 Prerequisites

Before running this project, make sure you have:

- **Python 3.8+** installed
- **MongoDB Atlas** account with Vector Search enabled
- **VoyageAI API key** ([Get one here](https://www.voyageai.com/))
- **OpenAI API key** ([Get one here](https://platform.openai.com/))

## 🔧 Installation

### 1. Clone the Repository
```bash
git clone https://github.com/yourusername/mongodb-rag-demo.git
cd mongodb-rag-demo
```

### 2. Create Virtual Environment
```bash
# Create virtual environment
python -m venv venv

# Activate it
# On macOS/Linux:
source venv/bin/activate
# On Windows:
venv\Scripts\activate
```

### 3. Install Dependencies
```bash
pip install -r requirements.txt
```

### 4. Configure Environment Variables
```bash
# Copy environment template
cp .env.example .env

# Edit .env with your credentials
nano .env  # or use your preferred editor
```

**Required environment variables:**
```env
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database
VOYAGE_API_KEY=pa-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
USERNAME=your_username
```

### 5. Set Up MongoDB Vector Search Index

The application will automatically create the required vector search index on first run, or you can create it manually:

```javascript
// In MongoDB Atlas, create a search index with this configuration:
{
  "name": "ragIndex",
  "type": "vectorSearch",
  "definition": {
    "fields": [
      {
        "type": "vector",
        "path": "embedding",
        "numDimensions": 1024,
        "similarity": "cosine"
      }
    ]
  }
}
```

## 🗂️ Project Structure

```
mongodb-rag-demo/
├── app.py                      # Main Flask application
├── rag_answer.py              # RAG pipeline orchestration
├── requirements.txt           # Python dependencies
├── .env.example              # Environment variables template
├── .gitignore               # Git ignore rules
│
├── config/
│   ├── __init__.py
│   └── settings.py          # Configuration management
│
├── core/
│   ├── __init__.py
│   ├── database.py          # MongoDB connection and setup
│   ├── embeddings/
│   │   ├── __init__.py
│   │   └── voyage_embedder.py  # VoyageAI embedding service
│   ├── search/
│   │   ├── __init__.py
│   │   └── vector_search.py    # MongoDB vector search engine
│   └── rag/
│       ├── __init__.py
│       ├── retriever.py        # Document retrieval logic
│       └── generator.py        # AI response generation
│
├── templates/
│   └── index.html           # Main UI template
│
├── static/                  # CSS, JS, images (if any)
│
└── ingestion/              # Data ingestion scripts
    ├── ingest_pdf.py       # PDF document processing
    └── ingest_sitemap.py   # Web scraping and indexing
```

## 🚀 Usage

### Starting the Application

```bash
# Make sure your virtual environment is activated
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Start the Flask application
python app.py
```

The application will be available at: **http://localhost:5000**

### Using the Demo

1. **Ask Questions**: Enter any question about your indexed documents
2. **Adjust Parameters**:
   - **Documents to Rerank**: Number of final documents (1-50)
   - **Vector Search Limit**: MongoDB candidates to examine (50-500)
3. **View Results**:
   - Performance metrics with timing breakdown
   - Before/after reranking comparison
   - AI-generated answer with source citations

### Data Ingestion (Optional)

If you want to add your own documents:

```bash
# For PDF documents (place PDFs in ./pdfs/ folder)
python ingest_pdf.py

# For web pages (configure sitemap URL in script)
python ingest_sitemap.py
```

## ⚙️ Configuration Options

### MongoDB Vector Search Parameters

- **Documents to Rerank**: Controls how many documents are passed to the reranking stage
- **Vector Search Limit**: Controls MongoDB's `numCandidates` parameter
  - Higher values = better recall but slower search
  - Lower values = faster search but potentially missed relevant documents

### Model Configuration

The system intent is to support multiple embedding models, currently working with :
- **Voyage 3.5 Lite**: Fast and efficient for general use

### Environment Variables

| Variable | Description | Example |
|----------|-------------|---------|
| `MONGODB_URI` | MongoDB Atlas connection string | `mongodb+srv://...` |
| `VOYAGE_API_KEY` | VoyageAI API key | `pa-...` |
| `OPENAI_API_KEY` | OpenAI API key | `sk-...` |
| `USERNAME` | User identifier for documents | `demo_user` |
| `FLASK_DEBUG` | Enable debug mode | `True` |

## 📊 Demo Features

### 🎯 Performance Metrics
- **Total Processing Time**: End-to-end query processing
- **Retrieval Time**: MongoDB vector search + reranking
- **Generation Time**: AI response creation
- **Cost Estimation**: Approximate API costs per query
- **Search Efficiency**: Documents found vs candidates examined

### 📋 Document Analysis
- **Before Reranking**: Initial MongoDB vector search results
- **After Reranking**: VoyageAI optimized document ordering
- **Score Visualization**: Relevance scores for each document
- **Source Attribution**: Direct links to original documents

### 🤖 AI Response Features
- **Structured Formatting**: Headers, lists, and emphasis
- **Source Citations**: Every claim backed by document references
- **Multiple Languages**: Responds in the query language
- **Rich Formatting**: Code blocks, blockquotes, and tables

## 🔗 API Endpoints

| Endpoint | Method | Description |
|----------|--------|-------------|
| `/` | GET/POST | Main application interface |
| `/stats` | GET | Collection statistics and document counts |
| `/health` | GET | System health check and service status |

### Example API Response
```json
{
  "status": "healthy",
  "database_connected": true,
  "collection_stats": {
    "total_documents": 1247,
    "pdf_documents": 856,
    "url_documents": 391
  }
}
```

## 🏗️ Architecture

### RAG Pipeline Flow
1. **Query Processing**: User input validation and preprocessing
2. **Embedding Generation**: VoyageAI converts query to vector
3. **Vector Search**: MongoDB finds similar documents using cosine similarity
4. **Reranking**: VoyageAI reorders results for optimal relevance
5. **Context Assembly**: Selected documents prepared for LLM
6. **Answer Generation**: GPT-4 creates comprehensive response
7. **Response Formatting**: Structured output with citations

### MongoDB Vector Search
- **Index Type**: `vectorSearch` with cosine similarity
- **Embedding Dimensions**: 1024 (VoyageAI standard)
- **Search Strategy**: Approximate Nearest Neighbor with configurable candidates
- **Filtering**: Support for metadata-based document filtering


### Common Issues

**Connection Errors**:
- Verify MongoDB Atlas IP whitelist includes your IP
- Check connection string format and credentials
- Ensure Vector Search is enabled on your cluster

**API Errors**:
- Validate API keys in `.env` file
- Check API usage limits and billing status
- Ensure proper API key permissions

**Performance Issues**:
- Reduce `numCandidates` for faster searches
- Optimize document chunking strategy
- Consider upgrading MongoDB cluster tier

